package org.example;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.LoggerContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class Main {
    private static final Logger logger = LoggerFactory.getLogger(Main.class);
    private static TaskManager taskManager;
    private static WorkerManager workerManager;
    private static Scanner scanner = new Scanner(System.in);

    static {
        LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();
        loggerContext.getLogger("org.example").setLevel(Level.OFF);
        loggerContext.getLogger(Logger.ROOT_LOGGER_NAME).setLevel(Level.OFF);
    }

    @SuppressWarnings("unchecked")
    private static Class<Task> asTaskClass(Class<? extends Task> clazz) {
        return (Class<Task>) clazz;
    }

    public static void main(String[] args) {
        try {
            initializeSystem();
            showMainMenu();
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }

    private static void initializeSystem() throws SQLException {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...");

        createWorkersTableIfNotExists();

        taskManager = new TaskManagerImpl(DatabaseConnection.getDataSource());
        workerManager = new WorkerManagerImpl(taskManager, DatabaseConnection.getDataSource());

        startAllWorkersFromDatabase();

        System.out.println("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n");
    }

    private static void createWorkersTableIfNotExists() throws SQLException {
        String sql = """
            CREATE TABLE IF NOT EXISTS workers_config (
                category VARCHAR(50) PRIMARY KEY,
                thread_count INT NOT NULL,
                max_attempts INT NOT NULL,
                exponential_backoff BOOLEAN NOT NULL,
                backoff_base DOUBLE NOT NULL,
                max_backoff_ms BIGINT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )""";

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        }
    }

    private static void startAllWorkersFromDatabase() {
        String sql = "SELECT * FROM workers_config";

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            int started = 0;
            while (rs.next()) {
                String category = rs.getString("category");
                try {
                    workerManager.init(
                            new WorkerParams(
                                    category,
                                    rs.getInt("thread_count")
                            ),
                            new RetryPolicyParam(
                                    rs.getBoolean("exponential_backoff"),
                                    rs.getInt("max_attempts"),
                                    rs.getDouble("backoff_base"),
                                    rs.getLong("max_backoff_ms")
                            )
                    );
                    started++;
                    System.out.println("üîÑ –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category + "' –∑–∞–ø—É—â–µ–Ω");
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category + "': " + e.getMessage());
                }
            }
            System.out.println("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: " + started);
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ –ë–î: " + e.getMessage());
        }
    }

    private static void showMainMenu() {
        while (true) {
            System.out.println("\n=== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===");
            System.out.println("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏");
            System.out.println("2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞–º–∏");
            System.out.println("3. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á");
            System.out.println("0. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());
                switch (choice) {
                    case 1 -> manageTasksMenu();
                    case 2 -> manageWorkersMenu();
                    case 3 -> viewTasksMenu();
                    case 0 -> {
                        shutdownSystem();
                        return;
                    }
                    default -> System.out.println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
                }
            } catch (NumberFormatException e) {
                System.out.println("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3");
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private static void manageTasksMenu() {
        List<String> categories = getActiveWorkerCategories();
        if (categories.isEmpty()) {
            System.out.println("\n‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤–æ—Ä–∫–µ—Ä.");
            return;
        }

        while (true) {
            System.out.println("\n=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò ===");
            System.out.println("1. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É");
            System.out.println("2. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á");
            System.out.println("3. –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");

            int choice = readIntInput(0, 3);
            switch (choice) {
                case 1 -> createSingleTaskInteractive(categories);
                case 2 -> createMultipleTasksInteractive(categories);
                case 3 -> cancelTaskInteractive(categories);
                case 0 -> { return; }
            }
        }
    }

    private static void createSingleTaskInteractive(List<String> categories) {
        System.out.println("\n=== –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò ===");

        String category = selectCategoryFromList(categories);
        if (category == null) return;

        Class<? extends Task> taskClass = selectTaskType();
        if (taskClass == null) return;

        System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ (JSON): ");
        String params = scanner.nextLine();

        LocalDateTime scheduledTime = selectExecutionTime();

        try {
            long taskId = taskManager.schedule(
                    category,
                    asTaskClass(taskClass),
                    new TaskParams(params),
                    scheduledTime
            );

            System.out.println("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
            printTaskDetails(taskId, category, taskClass.getSimpleName(), scheduledTime);
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private static void createMultipleTasksInteractive(List<String> categories) {
        System.out.println("\n=== –°–û–ó–î–ê–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ó–ê–î–ê–ß ===");

        String category = selectCategoryFromList(categories);
        if (category == null) return;

        System.out.print("\n–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞—Ç—å (1-100)? ");
        int count = readIntInput(1, 100);

        System.out.print("–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0-60)? ");
        int interval = readIntInput(0, 60);

        TaskTypeSelection taskType = selectTaskTypeForBatch();
        if (taskType == null) return;

        System.out.println("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
        System.out.print("–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ? (y/n): ");
        if (!readYesNoInput()) return;

        int created = 0;
        for (int i = 0; i < count; i++) {
            try {
                Class<? extends Task> taskClass = taskType.getTaskClass(i);
                String params = String.format("{\"taskNum\":%d,\"totalTasks\":%d}", i+1, count);

                long taskId = taskManager.schedule(
                        category,
                        asTaskClass(taskClass),
                        new TaskParams(params),
                        LocalDateTime.now().plusSeconds(i * interval)
                );

                created++;
                System.out.printf("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #%d (ID: %d, —Ç–∏–ø: %s)%n",
                        i+1, taskId, taskClass.getSimpleName());

                if (interval > 0 && i < count - 1) {
                    Thread.sleep(interval * 1000L);
                }
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #" + (i+1) + ": " + e.getMessage());
            }
        }

        System.out.printf("\n‚úÖ –ò—Ç–æ–≥: —Å–æ–∑–¥–∞–Ω–æ %d –∏–∑ %d –∑–∞–¥–∞—á%n", created, count);
    }

    private static void cancelTaskInteractive(List<String> categories) {
        System.out.println("\n=== –û–¢–ú–ï–ù–ê –ó–ê–î–ê–ß–ò ===");

        String category = selectCategoryFromList(categories);
        if (category == null) return;

        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã: ");
        long taskId = readLongInput(1, Long.MAX_VALUE);

        try {
            boolean result = taskManager.cancel(category, taskId);
            if (result) {
                System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            } else {
                System.out.println("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private static void manageWorkersMenu() {
        while (true) {
            System.out.println("\n=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–†–ö–ï–†–ê–ú–ò ===");
            System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä");
            System.out.println("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä");
            System.out.println("3. –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");

            int choice = readIntInput(0, 3);
            switch (choice) {
                case 1 -> addWorkerInteractive();
                case 2 -> stopWorkerInteractive();
                case 3 -> listWorkersInteractive();
                case 0 -> { return; }
            }
        }
    }

    private static void addWorkerInteractive() {
        System.out.println("\n=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–û–†–ö–ï–†–ê ===");

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ");
        String category = scanner.nextLine().trim();
        if (category.isEmpty()) {
            System.out.println("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            return;
        }

        System.out.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (1-10): ");
        int threads = readIntInput(1, 10);

        System.out.println("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:");
        System.out.print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (1-10): ");
        int maxAttempts = readIntInput(1, 10);

        System.out.print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (y/n)? ");
        boolean expBackoff = readYesNoInput();

        double backoffBase = 2.0;
        long maxBackoff = 10000;

        if (expBackoff) {
            System.out.print("–ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ (1.0-5.0): ");
            backoffBase = readDoubleInput(1.0, 5.0);

            System.out.print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å, 1000-60000): ");
            maxBackoff = readLongInput(1000, 60000);
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = """
                INSERT INTO workers_config 
                (category, thread_count, max_attempts, exponential_backoff, backoff_base, max_backoff_ms) 
                VALUES (?, ?, ?, ?, ?, ?)
                """;

            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, category);
                stmt.setInt(2, threads);
                stmt.setInt(3, maxAttempts);
                stmt.setBoolean(4, expBackoff);
                stmt.setDouble(5, backoffBase);
                stmt.setLong(6, maxBackoff);
                stmt.executeUpdate();
            }

            DatabaseConnection.initializeDatabaseForCategory(category);

            workerManager.init(
                    new WorkerParams(category, threads),
                    new RetryPolicyParam(expBackoff, maxAttempts, backoffBase, maxBackoff)
            );

            System.out.println("‚úÖ –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category + "' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω");
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞: " + e.getMessage());
        }
    }

    private static void stopWorkerInteractive() {
        List<String> activeCategories = getActiveWorkerCategories();
        if (activeCategories.isEmpty()) {
            System.out.println("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
            return;
        }

        System.out.println("\n=== –û–°–¢–ê–ù–û–í–ö–ê –í–û–†–ö–ï–†–ê ===");
        String category = selectCategoryFromList(activeCategories);
        if (category == null) return;

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "DELETE FROM workers_config WHERE category = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, category);
                stmt.executeUpdate();
            }

            workerManager.destroy(category);
            System.out.println("‚úÖ –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category + "' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–∫–µ—Ä–∞: " + e.getMessage());
        }
    }

    private static void listWorkersInteractive() {
        System.out.println("\n=== –°–ü–ò–°–û–ö –í–û–†–ö–ï–†–û–í ===");

        String sql = "SELECT * FROM workers_config ORDER BY created_at DESC";

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            System.out.println("‚îÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è             ‚îÇ –ü–æ—Ç–æ–∫–∏   ‚îÇ –ú–∞–∫—Å –ø–æ–ø—ã—Ç.‚îÇ –ó–∞–¥–µ—Ä–∂–∫–∞     ‚îÇ –°–æ–∑–¥–∞–Ω             ‚îÇ");
            System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");

            while (rs.next()) {
                System.out.printf("‚îÇ %-21s ‚îÇ %-8d ‚îÇ %-10d ‚îÇ %-12s ‚îÇ %-19s ‚îÇ%n",
                        rs.getString("category"),
                        rs.getInt("thread_count"),
                        rs.getInt("max_attempts"),
                        rs.getBoolean("exponential_backoff") ? "—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü." : "—Ñ–∏–∫—Å–∏—Ä.",
                        rs.getTimestamp("created_at").toLocalDateTime().toLocalTime());
            }
            System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤: " + e.getMessage());
        }
    }

    private static List<String> getActiveWorkerCategories() {
        List<String> categories = new ArrayList<>();
        String sql = "SELECT category FROM workers_config";

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                categories.add(rs.getString("category"));
            }
        } catch (SQLException e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: " + e.getMessage());
        }
        return categories;
    }

    private static void viewTasksMenu() {
        List<String> categories = getActiveWorkerCategories();
        if (categories.isEmpty()) {
            System.out.println("\n‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤. –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
            return;
        }

        while (true) {
            System.out.println("\n=== –ü–†–û–°–ú–û–¢–† –ó–ê–î–ê–ß ===");
            System.out.println("1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á");
            System.out.println("2. –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏");
            System.out.println("3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
            System.out.println("0. –ù–∞–∑–∞–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ");

            int choice = readIntInput(0, 3);
            switch (choice) {
                case 1 -> listAllTasksInteractive(categories);
                case 2 -> showTaskStatusInteractive(categories);
                case 3 -> showCategoryStatsInteractive(categories);
                case 0 -> { return; }
            }
        }
    }

    private static void listAllTasksInteractive(List<String> categories) {
        String category = selectCategoryFromList(categories);
        if (category == null) return;

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "SELECT id, task_class, status, scheduled_time, attempt_count, max_attempts " +
                    "FROM deferred_" + category + " ORDER BY scheduled_time DESC LIMIT 50";

            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                System.out.printf("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–¥–∞—á (%s):%n", category);
                System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
                System.out.println("‚îÇ ID    ‚îÇ –¢–∏–ø                          ‚îÇ –°—Ç–∞—Ç—É—Å     ‚îÇ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è    ‚îÇ –ü–æ–ø—ã—Ç–∫–∏  ‚îÇ");
                System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");

                while (rs.next()) {
                    System.out.printf("‚îÇ %-5d ‚îÇ %-28s ‚îÇ %-10s ‚îÇ %-19s ‚îÇ %2d/%-5d ‚îÇ%n",
                            rs.getLong("id"),
                            shortenClassName(rs.getString("task_class")),
                            rs.getString("status"),
                            rs.getTimestamp("scheduled_time").toLocalDateTime().toLocalTime(),
                            rs.getInt("attempt_count"),
                            rs.getInt("max_attempts"));
                }
                System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
            }
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }

    private static void showTaskStatusInteractive(List<String> categories) {
        String category = selectCategoryFromList(categories);
        if (category == null) return;

        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ");
        long taskId = readLongInput(1, Long.MAX_VALUE);

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "SELECT * FROM deferred_" + category + " WHERE id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setLong(1, taskId);
                ResultSet rs = stmt.executeQuery();

                if (rs.next()) {
                    System.out.println("\n=== –î–ï–¢–ê–õ–ò –ó–ê–î–ê–ß–ò ===");
                    System.out.printf("ID:           %d%n", rs.getLong("id"));
                    System.out.printf("–¢–∏–ø:          %s%n", rs.getString("task_class"));
                    System.out.printf("–°—Ç–∞—Ç—É—Å:       %s%n", rs.getString("status"));
                    System.out.printf("–ü–æ–ø—ã—Ç–∫–∏:      %d/%d%n", rs.getInt("attempt_count"), rs.getInt("max_attempts"));
                    System.out.printf("–°–æ–∑–¥–∞–Ω–∞:      %s%n", rs.getTimestamp("created_at"));
                    System.out.printf("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: %s%n", rs.getTimestamp("scheduled_time"));
                    System.out.printf("–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞: %s%n", rs.getTimestamp("next_attempt_time"));
                    System.out.printf("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:    %s%n", rs.getString("params"));
                } else {
                    System.out.println("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private static void showCategoryStatsInteractive(List<String> categories) {
        String category = selectCategoryFromList(categories);
        if (category == null) return;

        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "SELECT " +
                    "COUNT(*) as total, " +
                    "SUM(CASE WHEN status = 'COMPLETED' THEN 1 ELSE 0 END) as completed, " +
                    "SUM(CASE WHEN status = 'FAILED' THEN 1 ELSE 0 END) as failed, " +
                    "SUM(CASE WHEN status = 'PENDING' THEN 1 ELSE 0 END) as pending, " +
                    "SUM(CASE WHEN status = 'PROCESSING' THEN 1 ELSE 0 END) as processing " +
                    "FROM deferred_" + category;

            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                if (rs.next()) {
                    System.out.println("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò " + category.toUpperCase() + " ===");
                    System.out.printf("–í—Å–µ–≥–æ –∑–∞–¥–∞—á:    %d%n", rs.getInt("total"));
                    System.out.printf("–£—Å–ø–µ—à–Ω–æ:        %d%n", rs.getInt("completed"));
                    System.out.printf("–° –æ—à–∏–±–∫–æ–π:      %d%n", rs.getInt("failed"));
                    System.out.printf("–û–∂–∏–¥–∞—é—Ç:        %d%n", rs.getInt("pending"));
                    System.out.printf("–í –ø—Ä–æ—Ü–µ—Å—Å–µ:     %d%n", rs.getInt("processing"));
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage());
        }
    }

    private static void shutdownSystem() {
        System.out.println("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...");
        try {
            List<String> categories = getActiveWorkerCategories();
            for (String category : categories) {
                workerManager.destroy(category);
            }
            System.out.println("‚úÖ –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–∫–µ—Ä–æ–≤: " + e.getMessage());
        }
        System.out.println("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }

    private static String selectCategoryFromList(List<String> categories) {
        System.out.println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
        for (int i = 0; i < categories.size(); i++) {
            System.out.printf("%d. %s%n", i+1, categories.get(i));
        }
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-" + categories.size() + "): ");

        try {
            int choice = Integer.parseInt(scanner.nextLine());
            if (choice >= 1 && choice <= categories.size()) {
                return categories.get(choice-1);
            }
        } catch (NumberFormatException e) {
            System.out.println("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥");
        }
        return null;
    }

    private static Class<? extends Task> selectTaskType() {
        System.out.println("\n–¢–∏–ø—ã –∑–∞–¥–∞—á:");
        System.out.println("1. SuccessTask (—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)");
        System.out.println("2. FailingTask (–∏–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏)");
        System.out.println("3. LongRunningTask (–¥–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ - 5 —Å–µ–∫)");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ (1-3): ");

        int choice = readIntInput(1, 3);
        return switch (choice) {
            case 1 -> SuccessTask.class;
            case 2 -> FailingTask.class;
            case 3 -> LongRunningTask.class;
            default -> null;
        };
    }

    private static TaskTypeSelection selectTaskTypeForBatch() {
        System.out.println("\n–¢–∏–ø –∑–∞–¥–∞—á –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:");
        System.out.println("1. –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ");
        System.out.println("2. –¢–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏");
        System.out.println("3. –ß–µ—Ä–µ–¥–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∏ —Å –æ—à–∏–±–∫–∞–º–∏");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ");

        int choice = readIntInput(1, 3);
        return switch (choice) {
            case 1 -> i -> SuccessTask.class;
            case 2 -> i -> FailingTask.class;
            case 3 -> i -> i % 2 == 0 ? SuccessTask.class : FailingTask.class;
            default -> null;
        };
    }

    private static LocalDateTime selectExecutionTime() {
        System.out.println("\n–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É:");
        System.out.println("1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ");
        System.out.println("2. –ß–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-2): ");

        int choice = readIntInput(1, 2);
        switch (choice) {
            case 1: return LocalDateTime.now();
            case 2: {
                System.out.print("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ (1-3600)? ");
                int seconds = readIntInput(1, 3600);
                return LocalDateTime.now().plusSeconds(seconds);
            }
            default: return LocalDateTime.now();
        }
    }

    private static void printTaskDetails(long taskId, String category, String taskType, LocalDateTime scheduledTime) {
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.printf("‚îÇ ID: %-17d ‚îÇ%n", taskId);
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.printf("‚îÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %-10s ‚îÇ%n", category);
        System.out.printf("‚îÇ –¢–∏–ø: %-16s ‚îÇ%n", taskType);
        System.out.printf("‚îÇ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:     ‚îÇ%n");
        System.out.printf("‚îÇ %-21s ‚îÇ%n", scheduledTime.toLocalTime());
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
    }

    private static String shortenClassName(String fullName) {
        return fullName.substring(fullName.lastIndexOf('.') + 1);
    }

    private static int readIntInput(int min, int max) {
        while (true) {
            try {
                int input = Integer.parseInt(scanner.nextLine());
                if (input >= min && input <= max) {
                    return input;
                }
                System.out.printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç %d –¥–æ %d: ", min, max);
            } catch (NumberFormatException e) {
                System.out.print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    private static long readLongInput(long min, long max) {
        while (true) {
            try {
                long input = Long.parseLong(scanner.nextLine());
                if (input >= min && input <= max) {
                    return input;
                }
                System.out.printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç %d –¥–æ %d: ", min, max);
            } catch (NumberFormatException e) {
                System.out.print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    private static double readDoubleInput(double min, double max) {
        while (true) {
            try {
                double input = Double.parseDouble(scanner.nextLine());
                if (input >= min && input <= max) {
                    return input;
                }
                System.out.printf("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç %.1f –¥–æ %.1f: ", min, max);
            } catch (NumberFormatException e) {
                System.out.print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    private static boolean readYesNoInput() {
        while (true) {
            String input = scanner.nextLine().trim().toLowerCase();
            if (input.equals("y") || input.equals("–¥") || input.equals("yes") || input.equals("–¥–∞")) {
                return true;
            }
            if (input.equals("n") || input.equals("–Ω") || input.equals("no") || input.equals("–Ω–µ—Ç")) {
                return false;
            }
            System.out.print("–í–≤–µ–¥–∏—Ç–µ 'y' (–¥–∞) –∏–ª–∏ 'n' (–Ω–µ—Ç): ");
        }
    }

    @FunctionalInterface
    private interface TaskTypeSelection {
        Class<? extends Task> getTaskClass(int index);
    }

    public static class SuccessTask implements Task {
        @Override
        public void execute(TaskParams params) {
            System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: " + params.toJson());
        }
    }

    public static class FailingTask implements Task {
        @Override
        public void execute(TaskParams params) throws Exception {
            throw new Exception("‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + params.toJson());
        }
    }

    public static class LongRunningTask implements Task {
        @Override
        public void execute(TaskParams params) throws InterruptedException {
            System.out.println("‚è≥ –î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞...");
            TimeUnit.SECONDS.sleep(5);
            System.out.println("‚úÖ –î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
    }
}